.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.22)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Gentoo::PerlMod::Version 3"
.TH Gentoo::PerlMod::Version 3 "2012-06-09" "perl v5.16.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Gentoo::PerlMod::Version \- Convert arbitrary Perl Modules' versions into normalised Gentoo versions.
.SH "VERSION"
.IX Header "VERSION"
version 0.5.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Gentoo::PerlMod::Version qw( :all );
\&
\&    # http://search.cpan.org/~gmpassos/XML\-Smart\-1.6.9/
\&    say gentooize_version( \*(Aq1.6.9\*(Aq )  # 1.6.9
\&
\&    http://search.cpan.org/~pip/Math\-BaseCnv\-1.6.A6FGHKE/
\&
\&    say gentooize_version(\*(Aq1.6.A6FGHKE\*(Aq)   #  <\-\- death, this is awful
\&
\&    # \-\- Work\-In\-Progress Features \-\-
\&
\&    say gentooize_version(\*(Aq1.6.A6FGHKE\*(Aq,{ lax => 1}) # <\-\- still death
\&
\&    say gentooize_version(\*(Aq1.6.A6FGHKE\*(Aq,{ lax => 2}) # 1.6.366.556.632.14  # <\-\- the best we can do.
\&
\&    say gentooize_version(\*(Aq1.9902\-TRIAL\*(Aq)   #  <\-\- death, this is not so bad, but not a valid gentoo/stable version
\&
\&    say gentooize_version(\*(Aq1.9902\-TRIAL\*(Aq, { lax => 1 })   #  1.990.200_rc # <\-\- \-TRIAL gets nuked, \*(Aqrc\*(Aq is added.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "gentooize_version"
.IX Subsection "gentooize_version"
.Vb 1
\&    my $normalized = gentooize_version( $weird_version )
.Ve
.PP
gentooize_version tries hard to mangle a version that is part of a \s-1CPAN\s0 dist into a normalized form
for Gentoo, which can be used as the version number of the ebuild, while storing the original upstream version in the ebuild.
.PP
.Vb 7
\&    CPAN: Foo\-Bar\-Baz 1.5
\&    print gentooize_version(\*(Aq1.5\*(Aq);  # \-> 1.500.0
\&    \-> dev\-perl/Foo\-Bar\-Baz\-1.500.0.ebuild
\&    cat dev\-perl/Foo\-Bar\-Baz\-1.500.0.ebuild
\&    # ...
\&    # MODULE_VERSION="1.5"
\&    # ...
.Ve
.PP
Normal behaviour accepts only sane non-testing versions, i.e.:
.PP
.Vb 4
\&    0.1         \-> 0.001.0
\&    0.001       \-> 0.1.0
\&    1.1         \-> 1.001.0
\&    1.123.13    \-> 1.123.13
.Ve
.PP
Etc.
.PP
This uses \f(CW\*(C`version.pm\*(C'\fR to read versions and to normalize them.
.PP
.Vb 4
\&    0.1    # 0.100.0
\&    0.01   # 0.10.0
\&    0.001  # 0.1.0
\&    0.0001 # 0.0.100
.Ve
.PP
So assuming Perl can handle your versions, they can be normalised.
.PP
\fIlax level 1\fR
.IX Subsection "lax level 1"
.PP
.Vb 1
\&    my $normalized = gentooize_version( $werid_version, { lax => 1 } );
.Ve
.PP
\&\fB\s-1EXPERIMENTAL:\s0\fR This feature is still in flux, and the emitted versions may change.
.PP
This adds one layer of laxativity, and permits parsing and processing of \*(L"Developer Release\*(R" builds.
.PP
.Vb 3
\&    1.10\-TRIAL  # 1.100.0_rc
\&    1.11\-TRIAL  # 1.110.0_rc
\&    1.1_1       # 1.110.0_rc
.Ve
.PP
\fIlax level 2\fR
.IX Subsection "lax level 2"
.PP
.Vb 1
\&    my $normalized = gentooize_version( $werid_version, { lax => 2 } );
.Ve
.PP
\&\fB\s-1EXPERIMENTAL:\s0\fR This feature is still in flux, and the emitted versions may change.
.PP
This adds another layer of laxativity, and permits parsing and processing of packages with versions not officially supported by Perl.
.PP
This means versions such as
.PP
.Vb 4
\&    1.6.A       # 1.6.10
\&    1.6.AA      # 1.6.370
\&    1.6.AAA      # 1.6.370.10
\&    1.6.AAAA      # 1.6.370.370
\&
\&    1.6.A6FGHKE # 1.6.366.556.632.14
.Ve
.PP
This is performed by some really nasty tricks, and treats the \s-1ASCII\s0 portion like a set of pairs.
.PP
.Vb 1
\&    1.6.A6.FG.HK.E
.Ve
.PP
And each ascii pair is treated like a Base36 number.
.PP
.Vb 6
\&    0 \-> 0
\&    ....
\&    9 \-> 9
\&    A \-> 10
\&    ...
\&    Z \-> 35
.Ve
.PP
A6 is thus
.PP
.Vb 1
\&    10 * 36 + 6 => 366
.Ve
.PP
As you can see, its really nasty, and hopefully its not needed.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
This module recognises the environment variable \s-1GENTOO_PERLMOD_VERSION_OPTS\s0 for a few features.
.PP
These are mostly useful for system wide or user-wide policies that may be applicable for using this module, depending on where it is used.
.PP
This field is split by white-space and each token has a meaning.
.SS "always_lax"
.IX Subsection "always_lax"
.Vb 5
\&  GENTOO_PERLMOD_VERSION_OPTS+=" always_lax=0 "
\&  GENTOO_PERLMOD_VERSION_OPTS+=" always_lax=1 "
\&  GENTOO_PERLMOD_VERSION_OPTS+=" always_lax=2 "
\&  GENTOO_PERLMOD_VERSION_OPTS+=" always_lax   "# same as always_lax=1
\&  GENTOO_PERLMOD_VERSION_OPTS+=" \-always_lax  "# unset always_lax
.Ve
.PP
This environment setting, if specified, overrides any specification of \*(L"lax\*(R" in the code. If this specified more than once, the right-most one applies.
.PP
Specifying \f(CW\*(C`\-always_lax\*(C'\fR will unset the setting, making it behave as if it had not been previously specified.
.SS "taint_safe"
.IX Subsection "taint_safe"
.Vb 2
\&  GENTOO_PERLMOD_VERSION_OPTS+=" taint_safe  " #on
\&  GENTOO_PERLMOD_VERSION_OPTS+=" \-taint_safe " #off
.Ve
.PP
As it stands, this module only emits messages via \s-1STDOUT/STDERR\s0 when an error occurs. For diagnosis, sometimes user provided data can appear in this output.
.PP
Specifying this option will remove the information as specified by the user where possible, to eliminate this risk if this is a security issue for you.
.PP
It is not a guarantee of safety, but merely a tool you might find useful, depending on circumstances.
.SS "carp_debug"
.IX Subsection "carp_debug"
.Vb 2
\&  GENTOO_PERLMOD_VERSION_OPTS+=" carp_debug " #on
\&  GENTOO_PERLMOD_VERSION_OPTS+=" \-carp_debug " #off
.Ve
.PP
Lots of information is passed to our internal carp proxy that could aid in debugging a future problem.
To see this information instead of the simple message that is usually sent to \f(CW\*(C`Carp\*(C'\fR, enable this option.
.PP
\&\fBNote:\fR As values in the hashes that would be printed can come from users, \f(CW\*(C`carp_debug\*(C'\fR is ignored if \f(CW\*(C`taint_safe\*(C'\fR is on.
.SH "THANKS"
.IX Header "THANKS"
.IP "Torsten Veller \- Inspiration for this Module and all the work on Gentoo Perl." 4
.IX Item "Torsten Veller - Inspiration for this Module and all the work on Gentoo Perl."
.PD 0
.IP "Vincent Pit \- For solving most of the real bugs in this code before people tried to use them." 4
.IX Item "Vincent Pit - For solving most of the real bugs in this code before people tried to use them."
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Kent Fredric <kentnl@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Kent Fredric <kentnl@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
